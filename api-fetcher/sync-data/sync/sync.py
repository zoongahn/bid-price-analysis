from typing import Optional, Callable

from common.init_mongodb import init_mongodb
from common.init_psql import init_psql
from utils.postgres_meta import PostgresMeta
from transform_document import transform_document
from tqdm import tqdm
from psycopg2.extras import execute_values
from pymongo import UpdateOne


class DataSync:
	def __init__(self, batch_size: int = 10000):
		self.mongo_server, self.mongo_client = init_mongodb()
		self.mongo_db = self.mongo_client.get_database("gfcon_raw")

		self.psql_server, self.psql_conn = init_psql()
		self.psql_cur = self.psql_conn.cursor()

		self.mongo_default = self.mongo_db.get_collection("ÏûÖÏ∞∞Í≥µÍ≥†Ï†ïÎ≥¥ÏÑúÎπÑÏä§.ÏûÖÏ∞∞Í≥µÍ≥†Î™©Î°ùÏ†ïÎ≥¥ÏóêÎåÄÌïúÍ≥µÏÇ¨Ï°∞Ìöå")
		self.mongo_bssAmt = self.mongo_db.get_collection("ÏûÖÏ∞∞Í≥µÍ≥†Ï†ïÎ≥¥ÏÑúÎπÑÏä§.ÏûÖÏ∞∞Í≥µÍ≥†Î™©Î°ùÏ†ïÎ≥¥ÏóêÎåÄÌïúÍ≥µÏÇ¨Í∏∞Ï¥àÍ∏àÏï°Ï°∞Ìöå")
		self.mongo_reserve_price = self.mongo_db.get_collection("ÎÇôÏ∞∞Ï†ïÎ≥¥ÏÑúÎπÑÏä§.Í∞úÏ∞∞Í≤∞Í≥ºÍ≥µÏÇ¨ÏòàÎπÑÍ∞ÄÍ≤©ÏÉÅÏÑ∏Î™©Î°ùÏ°∞Ìöå")
		self.mongo_bid_list = self.mongo_db.get_collection("Í≥µÍ≥µÎç∞Ïù¥ÌÑ∞Í∞úÎ∞©ÌëúÏ§ÄÏÑúÎπÑÏä§.Îç∞Ïù¥ÌÑ∞ÏÖãÍ∞úÎ∞©ÌëúÏ§ÄÏóêÎî∞Î•∏ÎÇôÏ∞∞Ï†ïÎ≥¥")
		self.mongo_company = self.mongo_db.get_collection("ÏÇ¨Ïö©ÏûêÏ†ïÎ≥¥ÏÑúÎπÑÏä§.Ï°∞Îã¨ÏóÖÏ≤¥Í∏∞Î≥∏Ï†ïÎ≥¥")

		self.batch_size = batch_size

	def delete_data(self, table_name: str):
		self.psql_cur.execute(f"DELETE FROM {table_name};")
		self.psql_conn.commit()

	def _flush(self, rows: list[tuple], table: str, columns: list[str], placeholder: str, conflict_on: str):
		if not rows:
			return
		sql = f"""
			INSERT INTO {table} ({', '.join(columns)})
			VALUES %s 
			ON CONFLICT {conflict_on} DO NOTHING;
		"""
		execute_values(self.psql_cur, sql, rows, template=placeholder)
		self.psql_conn.commit()
		rows.clear()

	def _mark_synced(self, collection, key_list: list[tuple], key_fields: tuple[str, ...]):
		ops = []
		for keys in key_list:
			query = dict(zip(key_fields, keys))
			ops.append(UpdateOne(query, {"$set": {"is_synced": True}}))

		if ops:
			collection.bulk_write(ops, ordered=False)

	def sync_notice(self):
		WIN_FIELDS = [
			"fnlSucsfAmt", "fnlSucsfRt", "fnlSucsfDate",
			"fnlSucsfCorpNm", "fnlSucsfCorpCeoNm", "fnlSucsfCorpOfclNm",
			"fnlSucsfCorpBizrno", "fnlSucsfCorpAdrs", "fnlSucsfCorpContactTel",
			"cntrctCnclsSttusNm", "bidwinrDcsnMthdNm",
		]

		WIN_PROJECTION = {f: 1 for f in WIN_FIELDS}
		WIN_PROJECTION["_id"] = 0

		cursor = self.mongo_default.find({"is_synced": {"$ne": True}}, {"_id": 0})

		def transform_with_merge(doc):
			bid_no = doc["bidNtceNo"]
			bid_ord = doc["bidNtceOrd"]

			doc_bssAmt = self.mongo_bssAmt.find_one({"bidNtceNo": bid_no, "bidNtceOrd": bid_ord}, {"_id": 0}) or {}
			doc_bid = self.mongo_bid_list.find_one({"bidNtceNo": bid_no, "bidNtceOrd": bid_ord}, WIN_PROJECTION) or {}

			merged = {**doc, **doc_bssAmt, **doc_bid}
			row_dict = transform_document("notice", merged, None)
			row_dict.pop("_id", None)

			return row_dict

		self.sync_mongo_to_postgres(
			mongo_collection=self.mongo_default,
			psql_table="notice",
			psql_pk=("bidntceno", "bidntceord"),
			mongo_unique_keys=("bidNtceNo", "bidNtceOrd"),
			preprocess=transform_with_merge
		)

	def sync_mongo_to_postgres(self, *, mongo_collection, psql_table: str, psql_pk: tuple[str, ...],
	                           mongo_unique_keys: tuple[str, ...],
	                           field_aliases: list[tuple[str, str]] | None = None,
	                           preprocess: Optional[Callable[[dict], dict]] = None):
		"""
		Parameters:
		    mongo_collection:
		        ÎèôÍ∏∞Ìôî ÎåÄÏÉÅÏù¥ ÎêòÎäî MongoDB Ïª¨Î†âÏÖò Í∞ùÏ≤¥ÏûÖÎãàÎã§. Ïòà: self.mongo_default
		    psql_table (str):
		        Îç∞Ïù¥ÌÑ∞Î•º ÏÇΩÏûÖÌï† PostgreSQL ÌÖåÏù¥Î∏î Ïù¥Î¶ÑÏûÖÎãàÎã§.
		    psql_pk (tuple[str, ...]):
		        PSQL INSERT ÏøºÎ¶¨Ïùò ON CONFLICT Ï†àÏóêÏÑú ÏÇ¨Ïö©Ìï† PK ÌäúÌîåÏûÖÎãàÎã§.
		        PSQLÎ°ú sync Í≥ºÏ†ïÏóêÏÑú ÌïÑÎìúÎ™ÖÏùÄ Î™®Îëê ÏÜåÎ¨∏ÏûêÎ°ú Î≥ÄÌôòÎêòÎØÄÎ°ú ÌååÎùºÎØ∏ÌÑ∞ Ïó≠Ïãú Î∞òÎìúÏãú ÏÜåÎ¨∏ÏûêÎ°ú Ï†úÍ≥µÎêòÏñ¥ÏïºÌï®.
		        Ïòà: ("bidntceno", "bidntceord")
		    mongo_unique_keys (tuple[str, ...]):
				is_syncedÎ•º toggleÌï†Îïå ÏÇ¨Ïö©ÎêòÎäî Î™ΩÍ≥†ÎîîÎπÑ Ïª¨Î†âÏÖòÏùò unique key. Ïòà: ("bidNtceNo", "bidNtceOrd")
		    field_aliases (list[tuple[str, str]]):
		        MongoDB ÌïÑÎìúÎ™ÖÍ≥º PostgreSQL Ïª¨ÎüºÎ™ÖÏùÑ Îã§Î•¥Í≤å ÏÑ§Ï†ïÌï† Í≤ΩÏö∞Ïùò Îß§Ìïë Î¶¨Ïä§Ìä∏.
		        ÌòïÏãù: [(psql_field, mongo_field)]
		        Ïòà: [("range_no", "compnoRsrvtnPrceSno")]
		    preprocess (Optional[Callable[[dict], dict]]):
		        Í∞Å Mongo Î¨∏ÏÑúÎ•º PostgreSQL row ÌòïÏãùÏùò dictÎ°ú Î≥ÄÌôòÌïòÎäî ÏÇ¨Ïö©Ïûê Ï†ïÏùò Ìï®ÏàòÏûÖÎãàÎã§.
		        Ï†úÍ≥µÎêòÏßÄ ÏïäÏúºÎ©¥ Í∏∞Î≥∏ transform_document()Í∞Ä ÏÇ¨Ïö©Îê©ÎãàÎã§.
		"""
		meta = PostgresMeta(self.psql_conn).get_column_types(psql_table)
		psql_columns = list(meta.keys())
		placeholder = "(" + ",".join(["%s"] * len(psql_columns)) + ")"

		total = mongo_collection.count_documents({"is_synced": {"$ne": True}})
		print(f"üîÑ [{psql_table}] Ï¥ù {total:,} Í±¥ ÎèôÍ∏∞Ìôî ÏãúÏûë (batch={self.batch_size})")

		buffer: list[tuple] = []
		synced_keys: list[tuple] = []

		cursor = mongo_collection.find({"is_synced": {"$ne": True}}, {"_id": 0})

		for doc in tqdm(cursor, total=total):
			# Î≥ÑÎèÑ Ìï®ÏàòÍ∞Ä ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨ÎêòÏóàÎäîÏßÄ?
			if preprocess:
				row_dict = preprocess(doc)
			else:
				print(doc)
				row_dict = transform_document(psql_table, doc, field_aliases=field_aliases)
				row_dict.pop("_id", None)
				print(row_dict)

			buffer.append(tuple(row_dict.get(col) for col in psql_columns))
			synced_keys.append(tuple(doc[field] for field in mongo_unique_keys))

			if len(buffer) >= self.batch_size:
				self._flush(buffer, psql_table, psql_columns, placeholder, f"({', '.join(psql_pk)})")
				self._mark_synced(mongo_collection, synced_keys, mongo_unique_keys)
				buffer.clear()
				synced_keys.clear()

		if buffer:
			self._flush(buffer, psql_table, psql_columns, placeholder, f"({', '.join(psql_pk)})")
			self._mark_synced(mongo_collection, synced_keys, mongo_unique_keys)

		print(f"‚úÖ  {psql_table} ÎèôÍ∏∞Ìôî ÏôÑÎ£å")

	def execute(self, sync_table: str):
		match sync_table:
			case "notice":
				self.sync_notice()
			case "reserve_price_range":
				self.sync_mongo_to_postgres(
					mongo_collection=self.mongo_reserve_price,
					psql_table="reserve_price_range",
					psql_pk=("bidntceno", "bidntceord", "range_no"),
					mongo_unique_keys=("bidNtceNo", "bidNtceOrd", "compnoRsrvtnPrceSno"),
					field_aliases=[("range_no", "compnoRsrvtnPrceSno")]
				)
			case "company":
				self.sync_mongo_to_postgres(
					mongo_collection=self.mongo_company,
					psql_table="company",
					psql_pk=("bizno",),
					mongo_unique_keys=("bizno",)
				)
			case _:
				raise ValueError(f"Invalid sync_table: {sync_table}")

	def test(self):
		def distinct_bid_keys_mongo(coll):
			# MongoDBÏóêÏÑú (bidNtceNo, bidNtceOrd) ÏåçÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
			pipeline = [
				{"$project": {"_id": 0, "bidNtceNo": 1, "bidNtceOrd": 1}},
				{"$group": {"_id": {"bidNtceNo": "$bidNtceNo", "bidNtceOrd": "$bidNtceOrd"}}},
			]
			for doc in coll.aggregate(pipeline):
				yield doc["_id"]["bidNtceNo"], doc["_id"]["bidNtceOrd"]

		def fetch_notice_keys_postgres():
			self.psql_cur.execute("SELECT bidNtceNo, bidNtceOrd FROM notice;")
			return set(self.psql_cur.fetchall())

		mongo_keys = set(distinct_bid_keys_mongo(self.mongo_reserve_price))
		notice_keys = fetch_notice_keys_postgres()

		missing = mongo_keys - notice_keys
		print(f"üîç reserve_price Ï§ë noticeÏóê ÏóÜÎäî Í≥µÍ≥† {len(missing):,}Í±¥")
		print([i for i, j in missing])


if __name__ == "__main__":
	sync = DataSync(batch_size=10000)
	sync.sync_reserve_price()
